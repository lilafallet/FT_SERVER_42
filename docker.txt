##DOCKER -- COOKIE

Conteneurs : Methode de cloisonnement autour de l'OS
-> faire tourner des environnements LINUS isolee des uns des autres, avec des conteneurs partageant le meme noyeau, contrairement au VM il n'y a pas d'OS car utilise l'OS de la machine hote
-> virtualise l'environnement d'execution comme le processeur, la memoire vive, le systeme de fichier mais pas la machine (toute la difference entre conteneurs et machine virtuelle)

Cgroups : Control groups -> permet de limiter et d'isoler l'utilisation des ressources
Namespace : espace de nommage

Controleurs : 
	- interraction des conteneurs avec OS
	- securite par privilege et ressources
	- duplication et la supression des conteneurs
	- accessibilites
	- portabilite
= peut simuler des environnements differents

VM : recree un serveur
Conteneurs pas d'OS donc plus leger
Serveurs peut heberger beaucoup plus de conteneurs
LXC 
Contient uniquement des applications avec leurs dependances

Client-serveur

Images docker : template pret a l'emploi avec des instructions pour la creation de conteneurs

Docker file : permet de creer une image etape par etape de maniere automatise
-> creer une image

##DOCKER -- GRAFIKART

LXC : gere les conteneurs

	- Docker Daemon : permettre de faire fonctionner les differents conteneurs (tache de fond)
	- Docker Client : systement de commande qui va permettre d'interragir avec les daemons
	- Boot2Docker : machine virtuelle qui integre tous les outils pour fonctionner sur Windows

##DOCKER -- OPENCLASSROOM

Docker virtualise the operating system

CONTAINER (DEBIAN)
------------------
DOCKER ENGINE
------------------
XUBUNTU
-----------------
HARDWARE

Install Docker
Root
Docker pull centos
Docker run -d -t --name [name] centos
Docker ps (voir si bien sur Docker)
Docker exwc -it [name] bash
exit

DOC DOCKER

docker run -> send the command to dockerd = communicate with daemon

Docker registries : store Docker Image
Docker configured to lokk for images on Docker Hub by default

$docker pull / $docker run = the required images are pulled from your configured registry
$docker push = image push on the configured registry

To create own image : create a Dockerfile
-> steps needed to create the image and run it
-> creer une couche dans l'image
-> quand rebuild l'image, seulement les changements qui sont rebuilt

CREATE A CONTAINER ON DOCKER

- penser a changer les droits sudo pour ne pas avoir a mettre sudo a chaque fois

$ docker pull debian:buster
## telechargement de l'image

$ docker run -i -t [NUMERO ID] /bin/bash
## creation du container en precisant le bash shell, cela va nous ouvrir une session bash qui va nous permettre de customiser l'image.
-> root@e9c1799e3d4d:/# 

$ exit
## quitter bash

$ docker ps -a
## permet de voir tous les containers en cours

$ docker start [NOM DE PORTS]
## permet de dire quel containers on va utiliser

$ docker attach [NOM DE PORTS]
## re rentrer dans bash
